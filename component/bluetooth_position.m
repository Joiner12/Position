function [position, debug_param] = bluetooth_position(data)
    %功能：蓝牙定位
    %定义：[position, debug_param] = bluetooth_position(data)
    %参数：
    %    data：一个文件的各帧数据
    %输出：
    %    position：各帧定位结果
    %    debug_param：调试参数,结构体,所有元素仅用于调试,具体如下：
    %               debug_param.ap_final_dist_calc：第i帧距离计算后ap数据
    %               debug_param.frame_id：当前帧号
    %               debug_param.centroid：数组,通过质心计算距离的帧号
    %               debug_param.config：各个构件参数

    %% 系统初始化
    frame_num = length(data); %总帧数
    position = cell(1, frame_num); %初始化每帧定位结果为空
    scope_prev_pos = struct(); %范围滤波上一帧结果
    pos_res_prev = struct(); % 上一帧定位结果
    config = sys_config(); %设置各个构件参数

    %仅用于debug
    rssi_fit_flag = 0;
    debug_param.ap_final_dist_calc = cell(frame_num, 1);
    debug_param.centroid = [];
    debug_param.frame_id = 0;
    debug_param.config = config;
    %% apselector 初始化
    ap_selector = init_ap_selector(20);
    gif_cnt = 1;

    % 逐帧处理
    for i = 1:frame_num
        %% 定位前预处理
        debug_param.frame_id = i;

        cur_ap = data{i};

        %剔除经纬度数据无效的ap数据
        cur_ap = prev_data_reduction_invalid_coordinate_del(cur_ap);

        %整合相同的ap数据
        cur_ap = prev_data_redcution_integrate_same_ap(cur_ap, ...
            config.integrate_same_ap_param);

        % 对ap接收到的原始RSSI进行滤波处理――滑动滤波
        cur_ap = prev_data_reduction_rssi_fit(cur_ap, ...
            config.rssi_fit_type, ...
            config.rssi_fit_param);

        if rssi_fit_flag
            %rssi滤波（后续只会用到卡尔曼滤波后结果rssi_kf，高斯及平滑结果仅用于数据分析）
            [cur_ap, ap_buf] = prev_rssi_filter(cur_ap, ...
                ap_buf, ...
                config.rssi_filter_param);

            for j = 1:length(cur_ap)
                cur_ap(j).rssi = cur_ap(j).rssi_kf;
            end

        else

            for j = 1:length(cur_ap)
                cur_ap(j).rssi_kf = cur_ap(j).rssi;
            end

        end

        [trilateration_ap, ap_selector] = pre_statistics_ap_selector(cur_ap, ap_selector);

        %% 对数模型:RSSI转换为距离
        cur_ap = prev_dist_calc(trilateration_ap, ...
            config.dist_calc_type, ...
            config.dist_calc_param);

        debug_param.ap_final_dist_calc{i} = cur_ap;

        %% 三边定位,pos_res = [x,y]
        [pos_res, ~] = trilateration_calc(cur_ap);

        % if final_flag

        %     if isempty(pos_res)
        %         %当前帧未定位出结果
        %         continue_invalid_frame_num = continue_invalid_frame_num + 1;

        %         if continue_invalid_frame_num >= config.history_valid_frame_num
        %             %无效帧数达到允许上限,认为历史数据已经无效,清空历史数据,恢复到
        %             %初始定位的状态,直接输出上一次最终结果
        %             %
        %             %注意：ap数据缓存ap_buf可以不清空，因为prev_rssi_filter函数设置的
        %             %      缓存ap有效上限ap_buffer_valid_frame_num小于无效帧数上限
        %             %      history_valid_frame_num,同时当前算法仅在不存在有效数据时
        %             %      出现未定位出结果的情况,因此还未达到清空历史数据条件的
        %             %      时候,ap数据缓存已经全部重置,其实此时不需要重复清空ap数据缓存
        %             continue_valid_frame_num = 0;
        %             config.jump_smooth_filter_param.jump_num = 0;
        %             ap_buf = [];
        %             prev_ap = [];
        %             scope_prev_pos = [];
        %             jump_smooth_prev_pos = [];
        %             pos_queue = queue_clear(pos_queue);
        %             position{i} = invalid_situation_pos;

        %             % continue;
        %         else
        %             %历史数据还有效,利用上次计算的初始定位结果进行后续定位处理
        %             pos_res = pos_res_prev;
        %         end

        %     else
        %         %当前帧成功定位出结果,保存当前结果作为初始定位的历史数据
        %         pos_res_prev = pos_res;
        %     end

        %     %% 定位后处理
        %     % 范围滤波
        %     pos_res = final_scope_filter(pos_res, ...
        %         scope_prev_pos, ...
        %         config.scope_filter_param);

        %     scope_prev_pos = pos_res;

        %     %跳点平滑滤波
        %     continue_valid_frame_num = continue_valid_frame_num + 1;
        %     config.jump_smooth_filter_param.frame_num = continue_valid_frame_num;
        %     [pos_res, pos_queue, jump_num] = final_jump_smooth_filter(pos_res, ...
        %         jump_smooth_prev_pos, ...
        %         pos_queue, ...
        %         config.jump_smooth_filter_param);

        %     config.jump_smooth_filter_param.jump_num = jump_num;
        %     jump_smooth_prev_pos = pos_res;
        %     invalid_situation_pos = pos_res;
        % else

        %     if isempty(pos_res)
        %         pos_res = pos_res_prev;
        %     else
        %         pos_res_prev = pos_res;
        %     end

        % end

        %% 定位后处理-范围滤波
        pos_res = final_scope_filter(pos_res, ...
            scope_prev_pos, ...
            config.scope_filter_param);

        scope_prev_pos = pos_res;

        if isempty(fieldnames(pos_res))
            pos_res = pos_res_prev;
        else
            pos_res_prev = pos_res;
        end

        position{i} = pos_res_prev;

        %% figure
        if true
            tcf('Positining'); % todo:异常点处理
            figure('name', 'Positining', 'Color', 'w');

            % draw_positioning_state(gca,'static', cur_ap, 'estimated_positon', [pos_res.lat, pos_res.lon], ...
                %     'true_pos', [30.54798217, 104.05861620]);
            draw_positioning_state(gca, 'static', cur_ap, 'estimated_positon', [pos_res.lat, pos_res.lon]);
            %% 生成gif
            if false
                frame = getframe(gcf);
                imind = frame2im(frame);
                [imind, cm] = rgb2ind(imind, 256);

                if gif_cnt == 1
                    imwrite(imind, cm, 'D:\Code\BlueTooth\pos_bluetooth_matlab\test.gif', ...
                        'gif', 'Loopcount', inf, 'DelayTime', 0.5);
                else
                    imwrite(imind, cm, 'D:\Code\BlueTooth\pos_bluetooth_matlab\test.gif', ...
                        'gif', 'WriteMode', 'append', 'DelayTime', 0.5);
                end

            end

            %% save png files
            if true
                pause(0.1);
                png_file = strcat('location-temp', num2str(gif_cnt), '.png');
                png_file = fullfile('D:\Code\BlueTooth\pos_bluetooth_matlab\Doc\img\', png_file);
                imwrite(frame2im(getframe(gcf)), png_file);
                fprintf('save figure as png file:%s\n', png_file);
            end

            gif_cnt = gif_cnt +1;

            if (gif_cnt >= 47 && gif_cnt <= 50) || (gif_cnt >= 65 && gif_cnt <= 70)
                debug_line = 1;
            end

            fprintf('cnt = %.0f\n', gif_cnt);
        end

    end

end
